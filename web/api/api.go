package api

import (
	"net/http"
	"strings"

	code "github.com/trwk76/gocode"
	golang "github.com/trwk76/gocode/go"
	"github.com/trwk76/gocode/web/api/spec"
)

func NewAPI(baseURL string) *API {
	if !strings.HasPrefix(baseURL, "/") {
		baseURL = "/" + baseURL
	}

	res := &API{
		baseURL:       baseURL,
	}

	res.Schemas = newSchemas(res)
	res.Parameters = newParameters(res)
	res.RequestBodies = newRequestBodies(res)
	res.Responses = newResponses(res)

	return res
}

type (
	API struct {
		baseURL         string
		Info            spec.Info
		Schemas         Schemas
		Parameters      Parameters
		RequestBodies   RequestBodies
		Responses       Responses
		Paths           NamedPaths
		SecuritySchemes NamedSecuritySchemes
		Security        spec.SecurityRequirements
		Tags            []spec.Tag
	}

	File struct {
		Name    string
		Content []byte
	}

	Files map[string][]byte
)

func (a *API) Generate(pkgName golang.PkgName) Files {
	res := spec.OpenAPI{
		OpenAPI: spec.Version,
		Info:    a.Info,
		Servers: []spec.Server{{URL: a.baseURL, Description: "Current server."}},
		Paths:   make(spec.Paths),
		Components: &spec.Components{
			Schemas:         make(spec.NamedSchemas),
			Parameters:      make(spec.NamedParameterOrRefs),
			Responses:       make(spec.NamedResponseOrRefs),
			RequestBodies:   make(spec.NamedRequestBodyOrRefs),
			SecuritySchemes: make(spec.NamedSecuritySchemeOrRefs),
		},
		Security: a.Security,
		Tags:     a.Tags,
	}

	unit := golang.Unit{
		Prefix:  golang.Comment(" THIS FILE IS AUTOMATICALLY GENERATED; DO NOT EDIT"),
		Package: pkgName,
	}

	for key, item := range a.SecuritySchemes {
		res.Components.SecuritySchemes[key] = spec.SecuritySchemeOrRef{Item: item}
	}

	body := golang.BlockStmt{}

	a.Paths.build(
		buildContext{
			api:    a,
			path:   "",
			params: nil,
			tags:   nil,
		},
		res.Paths,
		&body,
	)

	mux := golang.SymbolFor[http.ServeMux](&unit)

	body = append(
		body,
		nil,
		golang.ExprStmt{
			Expr: golang.CallExpr{
				Func: golang.MemberExpr{
					Value: golang.Symbol{
						ID: golang.ID("m"),
					},
					ID:    golang.ID("HandleFunc"),
				},
				Args: golang.Exprs{
					golang.StringExpr("GET " + a.baseURL + "/openapi.json"),
					golang.CallExpr{
						Func: golang.Symbol{
							Package: mux.Package,
							ID:      "HandleFunc",
						},
					},
				},
			},
		},
	)

	unit.Decls = append(unit.Decls, golang.FuncDecls{
		{
			ID:     golang.ID("Map"),
			Params: golang.Params{
				{
					ID:   golang.ID("m"),
					Type: golang.PtrType{Item: mux},
				},
			},
			Body: body,
		},
	})

	return Files{
		"openapi.json": res.JSON(),
		"openapi.yaml": res.YAML(),
		"api_gen.go": []byte(code.WriteString("\t", func(w *code.Writer) { unit.Write(w) })),
	}
}
